"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { createBrowserClient } from "@/lib/supabase-client"
import { useRouter } from "next/navigation"
import {
  Bold,
  Italic,
  Underline,
  AlignLeft,
  AlignCenter,
  AlignRight,
  ImageIcon,
  Upload,
  Save,
  Eye,
  LinkIcon,
  List,
  ListOrdered,
  Quote,
  Heading1,
  Heading2,
  Heading3,
  Minus,
  Type,
  Trash2,
  Edit,
} from "lucide-react"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogDescription,
} from "@/components/ui/dialog"

interface SmtpAccount {
  id: string
  name: string
  email: string
}

interface Attachment {
  name: string
  url: string
  size: number
  type: string
}

interface EmailTemplate {
  id?: string
  name: string
  subject: string
  from_name: string
  from_email: string
  reply_to: string
  html_content: string
  styles: {
    backgroundColor: string
    textColor: string
    primaryColor: string
    fontFamily: string
    fontSize: string
    buttonColor: string
    buttonTextColor: string
  }
  attachments?: Attachment[]
}

interface Props {
  smtpAccounts: SmtpAccount[]
  templateId?: string
}

export default function TemplateEditorClient({ smtpAccounts, templateId }: Props) {
  const router = useRouter()
  const [loading, setLoading] = useState(false)
  const [showPreview, setShowPreview] = useState(false)
  const editorRef = useRef<HTMLDivElement>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const [isEditing, setIsEditing] = useState(!!templateId)

  const [template, setTemplate] = useState<EmailTemplate>({
    name: "",
    subject: "",
    from_name: "–û–û–û –ê–°–¢–°",
    from_email: smtpAccounts[0]?.email || "",
    reply_to: "",
    html_content: "",
    styles: {
      backgroundColor: "#ffffff",
      textColor: "#333333",
      primaryColor: "#2563eb",
      fontFamily: "Arial, sans-serif",
      fontSize: "16px",
      buttonColor: "#2563eb",
      buttonTextColor: "#ffffff",
    },
    attachments: [],
  })

  const [newAttachments, setNewAttachments] = useState<File[]>([])
  const [attachmentsToDelete, setAttachmentsToDelete] = useState<string[]>([])

  const [showButtonDialog, setShowButtonDialog] = useState(false)
  const [showLinkDialog, setShowLinkDialog] = useState(false)
  const [buttonText, setButtonText] = useState("–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å")
  const [buttonUrl, setButtonUrl] = useState("https://")
  const [linkText, setLinkText] = useState("")
  const [linkUrl, setLinkUrl] = useState("https://")
  const [textColor, setTextColor] = useState("#333333")

  const savedSelection = useRef<Range | null>(null)

  // –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (templateId) {
      loadTemplate()
    }
  }, [templateId])

  const loadTemplate = async () => {
    if (!templateId) return

    setLoading(true)
    const supabase = createBrowserClient()

    try {
      const { data: templateData, error } = await supabase
        .from("email_templates")
        .select("*")
        .eq("id", templateId)
        .single()

      if (error) throw error

      if (templateData) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ JSON –≤ –æ–±—ä–µ–∫—Ç—ã
        const styles = typeof templateData.styles === 'string' 
          ? JSON.parse(templateData.styles) 
          : templateData.styles
        
        const attachments = typeof templateData.attachments === 'string'
          ? JSON.parse(templateData.attachments)
          : templateData.attachments

        setTemplate({
          ...templateData,
          styles,
          attachments: attachments || [],
        })

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        setTimeout(() => {
          if (editorRef.current && templateData.html_content) {
            editorRef.current.innerHTML = templateData.html_content
          }
        }, 100)
      }
    } catch (error) {
      console.error("[DEBUG] Error loading template:", error)
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–∞")
    } finally {
      setLoading(false)
    }
  }

  const saveCursorPosition = () => {
    const selection = window.getSelection()
    if (selection && selection.rangeCount > 0) {
      savedSelection.current = selection.getRangeAt(0)
    }
  }

  const restoreCursorPosition = () => {
    if (savedSelection.current && editorRef.current) {
      const selection = window.getSelection()
      if (selection) {
        selection.removeAllRanges()
        selection.addRange(savedSelection.current)
      }
      editorRef.current.focus()
    }
  }

  const applyFormat = (command: string, value?: string) => {
    saveCursorPosition()
    document.execCommand(command, false, value)
    updateContent()
    restoreCursorPosition()
  }

  const updateContent = () => {
    if (editorRef.current) {
      setTemplate({ ...template, html_content: editorRef.current.innerHTML })
    }
  }

  const insertButton = () => {
    saveCursorPosition()
    setShowButtonDialog(true)
  }

  const handleInsertButton = () => {
    restoreCursorPosition()

    const buttonHtml = `
      <table cellpadding="0" cellspacing="0" border="0" style="margin: 16px 0;">
        <tr>
          <td style="border-radius: 6px; background-color: ${template.styles.buttonColor};">
            <a href="${buttonUrl}" target="_blank" style="display: inline-block; padding: 12px 24px; color: ${template.styles.buttonTextColor}; text-decoration: none; font-weight: bold; font-family: Arial, sans-serif;">${buttonText}</a>
          </td>
        </tr>
      </table>
    `

    document.execCommand("insertHTML", false, buttonHtml)
    updateContent()

    setShowButtonDialog(false)
    setButtonText("–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å")
    setButtonUrl("https://")
  }

  const insertLink = () => {
    saveCursorPosition()
    const selection = window.getSelection()
    if (selection && selection.toString()) {
      setLinkText(selection.toString())
    }
    setShowLinkDialog(true)
  }

  const handleInsertLink = () => {
    restoreCursorPosition()

    const linkHtml = `<a href="${linkUrl}" style="color: ${template.styles.primaryColor}; text-decoration: underline;">${linkText || linkUrl}</a>`
    document.execCommand("insertHTML", false, linkHtml)
    updateContent()

    setShowLinkDialog(false)
    setLinkText("")
    setLinkUrl("https://")
  }

  const insertHeading = (level: number) => {
    applyFormat("formatBlock", `h${level}`)
  }

  const insertBlockquote = () => {
    applyFormat("formatBlock", "blockquote")
  }

  const insertHorizontalRule = () => {
    applyFormat("insertHorizontalRule")
  }

  const changeTextColor = (color: string) => {
    applyFormat("foreColor", color)
  }

  const insertImage = () => {
    const url = prompt("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    if (url) {
      const imgHtml = `<img src="${url}" style="max-width: 100%; height: auto; margin: 10px 0;" alt="Image" />`
      document.execCommand("insertHTML", false, imgHtml)
      updateContent()
    }
  }

  const checkBucketAccess = async (): Promise<boolean> => {
    const supabase = createBrowserClient()
    
    try {
      const { data, error } = await supabase.storage
        .from("email-attachments")
        .list()
      
      if (error) {
        console.error("‚ùå Bucket access error:", error)
        return false
      }
      
      console.log("‚úÖ Bucket access OK, files count:", data?.length)
      return true
    } catch (error) {
      console.error("‚ùå Bucket check failed:", error)
      return false
    }
  }

  const uploadFilesToStorage = async (files: File[]): Promise<Attachment[]> => {
    const supabase = createBrowserClient()
    const uploaded: Attachment[] = []

    console.log("üîÑ Starting file upload process...", { fileCount: files.length })

    // üî¥ –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      console.error("‚ùå User not authenticated for file upload:", authError)
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
    }

    console.log("‚úÖ User authenticated for upload:", user.id)

    for (const file of files) {
      try {
        const fileName = `${Math.random().toString(36).substring(2, 15)}-${Date.now()}.${file.name.split('.').pop()}`
        
        console.log("üì§ Uploading file:", {
          name: file.name,
          size: file.size,
          type: file.type,
          storageName: fileName,
          user: user.id
        })

        // üî¥ –£–ü–†–û–©–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from("email-attachments")
          .upload(fileName, file) // –¢–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        if (uploadError) {
          console.error("‚ùå STORAGE UPLOAD ERROR:", {
            message: uploadError.message,
            details: uploadError.details,
            statusCode: uploadError.statusCode
          })
          throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.name}: ${uploadError.message}`)
        }

        console.log("‚úÖ File uploaded to storage:", uploadData)

        // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
        const { data: { publicUrl } } = supabase.storage
          .from("email-attachments")
          .getPublicUrl(fileName)

        console.log("üîó Public URL:", publicUrl)

        const attachment: Attachment = {
          name: file.name,
          url: publicUrl,
          size: file.size,
          type: file.type,
        }

        uploaded.push(attachment)
        console.log("üìù Attachment added:", attachment)

      } catch (error) {
        console.error("üí• CRITICAL UPLOAD ERROR:", error)
        throw error
      }
    }

    console.log("üéâ All files uploaded successfully:", uploaded)
    return uploaded
  }

  const deleteFilesFromStorage = async (urls: string[]) => {
    const supabase = createBrowserClient()
    
    const filesToDelete = urls.map(url => {
      const path = url.split('/').pop()
      return path
    }).filter(Boolean)

    if (filesToDelete.length > 0) {
      console.log("üóëÔ∏è Deleting files:", filesToDelete)
      const { error } = await supabase.storage
        .from("email-attachments")
        .remove(filesToDelete)
      
      if (error) {
        console.error("‚ùå Error deleting files:", error)
        throw error
      }
    }
  }

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files)
      
      console.log("üñ±Ô∏è File input changed:", newFiles.map(f => ({ name: f.name, size: f.size, type: f.type })))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä
      const validFiles = newFiles.filter(file => {
        const validTypes = ['.pdf', '.doc', '.docx', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']
        const isValidType = validTypes.some(type => 
          file.name.toLowerCase().includes(type.replace('.', '')) || 
          file.type.includes(type)
        )
        
        if (!isValidType) {
          alert(`–§–∞–π–ª ${file.name} –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF, DOC, DOCX.`)
          return false
        }
        
        if (file.size > 10 * 1024 * 1024) {
          alert(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 10MB.`)
          return false
        }
        
        return true
      })
      
      setNewAttachments(prev => [...prev, ...validFiles])
      console.log("‚úÖ Valid files selected:", validFiles.map(f => ({ name: f.name, size: f.size })))
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ input
      if (fileInputRef.current) {
        fileInputRef.current.value = ""
      }
    }
  }

  const removeNewAttachment = (index: number) => {
    setNewAttachments(prev => prev.filter((_, i) => i !== index))
  }

  const removeExistingAttachment = (index: number) => {
    const attachment = template.attachments?.[index]
    if (attachment) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      setAttachmentsToDelete(prev => [...prev, attachment.url])
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
      const updatedAttachments = template.attachments?.filter((_, i) => i !== index) || []
      setTemplate({
        ...template,
        attachments: updatedAttachments
      })
    }
  }

  const handleSave = async () => {
    if (!template.name || !template.subject) {
      alert("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
      return
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    const finalContent = editorRef.current?.innerHTML || template.html_content
    if (!finalContent || finalContent.trim() === "" || finalContent === "<br>") {
      alert("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
      return
    }

    setLoading(true)
    const supabase = createBrowserClient()

    try {
      console.log("üíæ Starting template save process...")

      // üî¥ –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
      const { data: { user }, error: authError } = await supabase.auth.getUser()
      if (authError || !user) {
        console.error("‚ùå User not authenticated:", authError)
        throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.")
      }

      console.log("‚úÖ User authenticated:", { id: user.id, email: user.email })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∫–µ—Ç–∞
      const bucketAccess = await checkBucketAccess()
      if (!bucketAccess) {
        throw new Error("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É —Ñ–∞–π–ª–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∫–µ—Ç–∞.")
      }

      let newUploadedAttachments: Attachment[] = []

      // üî¥ –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í
      if (newAttachments.length > 0) {
        console.log("üìé Processing new attachments:", newAttachments.length)
        newUploadedAttachments = await uploadFilesToStorage(newAttachments)
        console.log("‚úÖ New attachments uploaded:", newUploadedAttachments)
      } else {
        console.log("‚ÑπÔ∏è No new attachments to upload")
      }

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (attachmentsToDelete.length > 0) {
        console.log("üóëÔ∏è Deleting attachments:", attachmentsToDelete)
        await deleteFilesFromStorage(attachmentsToDelete)
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
      const existingAttachments = template.attachments?.filter(att => 
        !attachmentsToDelete.includes(att.url)
      ) || []

      const allAttachments = [...existingAttachments, ...newUploadedAttachments]

      console.log("üìã Final attachments list:", allAttachments)

      const templateData = {
        name: template.name,
        subject: template.subject,
        from_name: template.from_name,
        from_email: template.from_email,
        reply_to: template.reply_to,
        html_content: finalContent,
        styles: template.styles,
        attachments: allAttachments, // üî¥ –í–ê–ñ–ù–û: attachments –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ó–î–ï–°–¨
        is_active: true,
      }

      console.log("üíø Saving template to database:", templateData)

      let result
      if (isEditing && templateId) {
        result = await supabase
          .from("email_templates")
          .update(templateData)
          .eq("id", templateId)
          .select()
      } else {
        result = await supabase
          .from("email_templates")
          .insert(templateData)
          .select()
      }

      if (result.error) {
        console.error("‚ùå DATABASE ERROR:", result.error)
        throw result.error
      }

      console.log("‚úÖ Template saved successfully:", result.data)
      alert(`–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ ${isEditing ? '–æ–±–Ω–æ–≤–ª–µ–Ω' : '—Å–æ—Ö—Ä–∞–Ω–µ–Ω'}!`)
      router.push("/admin/newsletter")
      
    } catch (error: any) {
      console.error("üí• SAVE PROCESS FAILED:", error)
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}`)
    } finally {
      setLoading(false)
    }
  }

  const generatePreviewHtml = () => {
    return `
      <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <style>
            body {
              margin: 0;
              padding: 20px;
              font-family: ${template.styles.fontFamily};
              font-size: ${template.styles.fontSize};
              color: ${template.styles.textColor};
              background-color: ${template.styles.backgroundColor};
            }
            .container {
              max-width: 600px;
              margin: 0 auto;
            }
          </style>
        </head>
        <body>
          <div class="container">
            ${template.html_content}
          </div>
        </body>
      </html>
    `
  }

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault()
  }

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault()
    const files = Array.from(e.dataTransfer.files)
    if (files.length > 0) {
      const inputEvent = {
        target: { files: e.dataTransfer.files }
      } as React.ChangeEvent<HTMLInputElement>
      handleFileUpload(inputEvent)
    }
  }

  const allAttachmentsCount = (template.attachments?.length || 0) + newAttachments.length

  return (
    <div className="p-8">
      <div className="mb-8 flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞' : '–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞'}
          </h1>
          <p className="text-gray-600">–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–∏–∑–∞–π–Ω –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ email —Ä–∞—Å—Å—ã–ª–∫–∏</p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" onClick={() => setShowPreview(!showPreview)}>
            <Eye className="w-4 h-4 mr-2" />
            {showPreview ? "–†–µ–¥–∞–∫—Ç–æ—Ä" : "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"}
          </Button>
          <Button onClick={handleSave} disabled={loading}>
            {isEditing ? <Edit className="w-4 h-4 mr-2" /> : <Save className="w-4 h-4 mr-2" />}
            {loading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : (isEditing ? "–û–±–Ω–æ–≤–∏—Ç—å" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")}
          </Button>
        </div>
      </div>

      {loading && !isEditing ? (
        <div className="flex justify-center items-center py-12">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞...</p>
          </div>
        </div>
      ) : showPreview ? (
        <Card className="p-6">
          <h2 className="text-xl font-semibold mb-4">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å—å–º–∞</h2>
          <div className="border rounded-lg p-4 bg-white">
            <div className="mb-4 pb-4 border-b">
              <p className="text-sm text-gray-600">
                –û—Ç: {template.from_name} &lt;{template.from_email}&gt;
              </p>
              <p className="text-sm text-gray-600">–¢–µ–º–∞: {template.subject}</p>
              {allAttachmentsCount > 0 && (
                <p className="text-sm text-gray-600">
                  –í–ª–æ–∂–µ–Ω–∏—è: {allAttachmentsCount} —Ñ–∞–π–ª(–æ–≤)
                </p>
              )}
            </div>
            <iframe 
              srcDoc={generatePreviewHtml()} 
              className="w-full h-[600px] border-0 rounded" 
              title="Email Preview" 
            />
          </div>
        </Card>
      ) : (
        <Tabs defaultValue="content" className="space-y-6">
          <TabsList>
            <TabsTrigger value="content">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</TabsTrigger>
            <TabsTrigger value="settings">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</TabsTrigger>
            <TabsTrigger value="style">–°—Ç–∏–ª—å</TabsTrigger>
            <TabsTrigger value="attachments">–í–ª–æ–∂–µ–Ω–∏—è ({allAttachmentsCount})</TabsTrigger>
          </TabsList>

          <TabsContent value="content" className="space-y-4">
            <Card className="p-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="template-name">–ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ *</Label>
                  <Input
                    id="template-name"
                    value={template.name}
                    onChange={(e) => setTemplate({ ...template, name: e.target.value })}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–µ–∫–ª–∞–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞"
                  />
                </div>

                <div>
                  <Label htmlFor="template-subject">–¢–µ–º–∞ –ø–∏—Å—å–º–∞ *</Label>
                  <Input
                    id="template-subject"
                    value={template.subject}
                    onChange={(e) => setTemplate({ ...template, subject: e.target.value })}
                    placeholder="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫—É"
                  />
                </div>

                <div>
                  <Label>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ *</Label>
                  <div className="border rounded-lg overflow-hidden">
                    <div className="bg-gray-50 border-b p-2 flex flex-wrap gap-1">
                      <Button type="button" variant="ghost" size="sm" onClick={() => applyFormat("bold")} title="–ñ–∏—Ä–Ω—ã–π">
                        <Bold className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={() => applyFormat("italic")} title="–ö—É—Ä—Å–∏–≤">
                        <Italic className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={() => applyFormat("underline")} title="–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π">
                        <Underline className="w-4 h-4" />
                      </Button>
                      <div className="w-px bg-gray-300 mx-1" />
                      <Button type="button" variant="ghost" size="sm" onClick={() => insertHeading(1)} title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1">
                        <Heading1 className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={() => insertHeading(2)} title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2">
                        <Heading2 className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={() => insertHeading(3)} title="–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3">
                        <Heading3 className="w-4 h-4" />
                      </Button>
                      <div className="w-px bg-gray-300 mx-1" />
                      <Button type="button" variant="ghost" size="sm" onClick={() => applyFormat("justifyLeft")} title="–ü–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é">
                        <AlignLeft className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={() => applyFormat("justifyCenter")} title="–ü–æ —Ü–µ–Ω—Ç—Ä—É">
                        <AlignCenter className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={() => applyFormat("justifyRight")} title="–ü–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é">
                        <AlignRight className="w-4 h-4" />
                      </Button>
                      <div className="w-px bg-gray-300 mx-1" />
                      <Button type="button" variant="ghost" size="sm" onClick={() => applyFormat("insertUnorderedList")} title="–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫">
                        <List className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={() => applyFormat("insertOrderedList")} title="–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫">
                        <ListOrdered className="w-4 h-4" />
                      </Button>
                      <div className="w-px bg-gray-300 mx-1" />
                      <Button type="button" variant="ghost" size="sm" onClick={insertBlockquote} title="–¶–∏—Ç–∞—Ç–∞">
                        <Quote className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={insertHorizontalRule} title="–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è">
                        <Minus className="w-4 h-4" />
                      </Button>
                      <div className="w-px bg-gray-300 mx-1" />
                      <div className="flex items-center gap-1">
                        <Type className="w-4 h-4 text-gray-600" />
                        <Input
                          type="color"
                          value={textColor}
                          onChange={(e) => {
                            setTextColor(e.target.value)
                            changeTextColor(e.target.value)
                          }}
                          className="w-12 h-8 p-1 cursor-pointer"
                          title="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞"
                        />
                      </div>
                      <div className="w-px bg-gray-300 mx-1" />
                      <Button type="button" variant="ghost" size="sm" onClick={insertLink} title="–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É">
                        <LinkIcon className="w-4 h-4" />
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={insertButton} title="–í—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É">
                        –ö–Ω–æ–ø–∫–∞
                      </Button>
                      <Button type="button" variant="ghost" size="sm" onClick={insertImage} title="–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
                        <ImageIcon className="w-4 h-4" />
                      </Button>
                      <div className="w-px bg-gray-300 mx-1" />
                      <select
                        className="px-2 py-1 border rounded text-sm"
                        onChange={(e) => applyFormat("fontSize", e.target.value)}
                        title="–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞"
                      >
                        <option value="">–†–∞–∑–º–µ—Ä</option>
                        <option value="1">–û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π</option>
                        <option value="2">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
                        <option value="3">–û–±—ã—á–Ω—ã–π</option>
                        <option value="4">–°—Ä–µ–¥–Ω–∏–π</option>
                        <option value="5">–ë–æ–ª—å—à–æ–π</option>
                        <option value="6">–û—á–µ–Ω—å –±–æ–ª—å—à–æ–π</option>
                        <option value="7">–û–≥—Ä–æ–º–Ω—ã–π</option>
                      </select>
                    </div>

                    {/* Editor */}
                    <div
                      ref={editorRef}
                      contentEditable
                      onInput={updateContent}
                      className="min-h-[400px] p-4 focus:outline-none prose max-w-none"
                      style={{
                        fontFamily: template.styles.fontFamily,
                        fontSize: template.styles.fontSize,
                        color: template.styles.textColor,
                        backgroundColor: template.styles.backgroundColor,
                      }}
                      suppressContentEditableWarning
                    />
                  </div>
                </div>
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="settings" className="space-y-4">
            <Card className="p-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="from-name">–ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</Label>
                  <Input
                    id="from-name"
                    value={template.from_name}
                    onChange={(e) => setTemplate({ ...template, from_name: e.target.value })}
                  />
                </div>

                <div>
                  <Label htmlFor="from-email">Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è *</Label>
                  <select
                    id="from-email"
                    className="w-full px-3 py-2 border rounded-md"
                    value={template.from_email}
                    onChange={(e) => setTemplate({ ...template, from_email: e.target.value })}
                  >
                    {smtpAccounts.map((account) => (
                      <option key={account.id} value={account.email}>
                        {account.name} ({account.email})
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <Label htmlFor="reply-to">Email –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤</Label>
                  <Input
                    id="reply-to"
                    type="email"
                    value={template.reply_to}
                    onChange={(e) => setTemplate({ ...template, reply_to: e.target.value })}
                    placeholder="reply@example.com"
                  />
                </div>
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="style" className="space-y-4">
            <Card className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <Label>–¶–≤–µ—Ç —Ñ–æ–Ω–∞</Label>
                  <div className="flex gap-2 mt-1">
                    <Input
                      type="color"
                      value={template.styles.backgroundColor}
                      onChange={(e) =>
                        setTemplate({
                          ...template,
                          styles: { ...template.styles, backgroundColor: e.target.value },
                        })
                      }
                      className="w-16 h-10"
                    />
                    <Input
                      value={template.styles.backgroundColor}
                      onChange={(e) =>
                        setTemplate({
                          ...template,
                          styles: { ...template.styles, backgroundColor: e.target.value },
                        })
                      }
                      className="flex-1"
                    />
                  </div>
                </div>

                <div>
                  <Label>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</Label>
                  <div className="flex gap-2 mt-1">
                    <Input
                      type="color"
                      value={template.styles.textColor}
                      onChange={(e) =>
                        setTemplate({
                          ...template,
                          styles: { ...template.styles, textColor: e.target.value },
                        })
                      }
                      className="w-16 h-10"
                    />
                    <Input
                      value={template.styles.textColor}
                      onChange={(e) =>
                        setTemplate({
                          ...template,
                          styles: { ...template.styles, textColor: e.target.value },
                        })
                      }
                      className="flex-1"
                    />
                  </div>
                </div>

                <div>
                  <Label>–¶–≤–µ—Ç –∫–Ω–æ–ø–æ–∫</Label>
                  <div className="flex gap-2 mt-1">
                    <Input
                      type="color"
                      value={template.styles.buttonColor}
                      onChange={(e) =>
                        setTemplate({
                          ...template,
                          styles: { ...template.styles, buttonColor: e.target.value },
                        })
                      }
                      className="w-16 h-10"
                    />
                    <Input
                      value={template.styles.buttonColor}
                      onChange={(e) =>
                        setTemplate({
                          ...template,
                          styles: { ...template.styles, buttonColor: e.target.value },
                        })
                      }
                      className="flex-1"
                    />
                  </div>
                </div>

                <div>
                  <Label>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫</Label>
                  <div className="flex gap-2 mt-1">
                    <Input
                      type="color"
                      value={template.styles.buttonTextColor}
                      onChange={(e) =>
                        setTemplate({
                          ...template,
                          styles: { ...template.styles, buttonTextColor: e.target.value },
                        })
                      }
                      className="w-16 h-10"
                    />
                    <Input
                      value={template.styles.buttonTextColor}
                      onChange={(e) =>
                        setTemplate({
                          ...template,
                          styles: { ...template.styles, buttonTextColor: e.target.value },
                        })
                      }
                      className="flex-1"
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="font-family">–®—Ä–∏—Ñ—Ç</Label>
                  <select
                    id="font-family"
                    className="w-full px-3 py-2 border rounded-md mt-1"
                    value={template.styles.fontFamily}
                    onChange={(e) =>
                      setTemplate({
                        ...template,
                        styles: { ...template.styles, fontFamily: e.target.value },
                      })
                    }
                  >
                    <option value="Arial, sans-serif">Arial</option>
                    <option value="'Times New Roman', serif">Times New Roman</option>
                    <option value="Georgia, serif">Georgia</option>
                    <option value="'Courier New', monospace">Courier New</option>
                    <option value="Verdana, sans-serif">Verdana</option>
                  </select>
                </div>

                <div>
                  <Label htmlFor="font-size">–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞</Label>
                  <select
                    id="font-size"
                    className="w-full px-3 py-2 border rounded-md mt-1"
                    value={template.styles.fontSize}
                    onChange={(e) =>
                      setTemplate({
                        ...template,
                        styles: { ...template.styles, fontSize: e.target.value },
                      })
                    }
                  >
                    <option value="12px">12px</option>
                    <option value="14px">14px</option>
                    <option value="16px">16px</option>
                    <option value="18px">18px</option>
                    <option value="20px">20px</option>
                    <option value="22px">22px</option>
                  </select>
                </div>
              </div>
            </Card>
          </TabsContent>

          <TabsContent value="attachments" className="space-y-4">
            <Card className="p-6">
              <div className="space-y-6">
                <div>
                  <Label>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã (PDF, DOC, DOCX)</Label>
                  <div 
                    className="mt-2 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 transition-colors"
                    onDragOver={handleDragOver}
                    onDrop={handleDrop}
                  >
                    <label className="flex flex-col items-center justify-center w-full h-32 cursor-pointer">
                      <div className="text-center">
                        <Upload className="w-8 h-8 mx-auto text-gray-400 mb-2" />
                        <p className="text-sm text-gray-600">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏—Ö —Å—é–¥–∞</p>
                        <p className="text-xs text-gray-500 mt-1">PDF, DOC, DOCX –¥–æ 10MB</p>
                      </div>
                      <input
                        ref={fileInputRef}
                        type="file"
                        className="hidden"
                        multiple                    
                        accept=".pdf,.doc,.docx,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                        onChange={handleFileUpload}
                      />
                    </label>
                  </div>
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö */}
                  {newAttachments.length > 0 && (
                    <div className="mt-3 p-3 bg-blue-50 rounded-lg">
                      <p className="text-sm text-blue-700">
                        –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: <strong>{newAttachments.length}</strong>
                      </p>
                      <p className="text-xs text-blue-600 mt-1">
                        –§–∞–π–ª—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞
                      </p>
                    </div>
                  )}
                </div>

                {/* –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è */}
                {template.attachments && template.attachments.length > 0 && (
                  <div>
                    <Label>–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è:</Label>
                    <div className="mt-3 space-y-3">
                      {template.attachments.map((attachment, index) => (
                        <div key={index} className="flex items-center justify-between p-4 bg-green-50 rounded-lg border">
                          <div className="flex items-center gap-3 flex-1">
                            <div className="p-2 bg-white rounded">
                              <Upload className="w-4 h-4 text-green-500" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                {attachment.name}
                              </p>
                              <p className="text-xs text-gray-500">
                                {(attachment.size / 1024).toFixed(1)} KB ‚Ä¢ {attachment.type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"}
                              </p>
                              <a 
                                href={attachment.url} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                className="text-xs text-blue-600 hover:underline"
                              >
                                –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
                              </a>
                            </div>
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => removeExistingAttachment(index)}
                            className="text-red-600 hover:text-red-700 hover:bg-red-50"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* –ù–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è */}
                {newAttachments.length > 0 && (
                  <div>
                    <Label>–ù–æ–≤—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è:</Label>
                    <div className="mt-3 space-y-3">
                      {newAttachments.map((file, index) => (
                        <div key={index} className="flex items-center justify-between p-4 bg-blue-50 rounded-lg border">
                          <div className="flex items-center gap-3 flex-1">
                            <div className="p-2 bg-white rounded">
                              <Upload className="w-4 h-4 text-blue-500" />
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-sm font-medium text-gray-900 truncate">
                                {file.name}
                              </p>
                              <p className="text-xs text-gray-500">
                                {(file.size / 1024).toFixed(1)} KB ‚Ä¢ {file.type || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"}
                              </p>
                            </div>
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => removeNewAttachment(index)}
                            className="text-red-600 hover:text-red-700 hover:bg-red-50"
                          >
                            <Trash2 className="w-4 h-4" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {allAttachmentsCount === 0 && (
                  <div className="text-center py-8 text-gray-500">
                    <Upload className="w-12 h-12 mx-auto mb-3 opacity-50" />
                    <p>–§–∞–π–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                    <p className="text-sm mt-1">–î–æ–±–∞–≤—å—Ç–µ PDF, DOC –∏–ª–∏ DOCX —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫ –ø–∏—Å—å–º—É</p>
                  </div>
                )}

                {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                {allAttachmentsCount > 0 && (
                  <div className="mt-4 p-3 bg-gray-100 rounded-lg">
                    <p className="text-xs text-gray-600">
                      <strong>–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤:</strong> {allAttachmentsCount} ‚Ä¢ 
                      <strong> –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ:</strong> {template.attachments?.length || 0} ‚Ä¢
                      <strong> –ù–æ–≤—ã–µ:</strong> {newAttachments.length} ‚Ä¢
                      {attachmentsToDelete.length > 0 && <span> <strong>–ù–∞ —É–¥–∞–ª–µ–Ω–∏–µ:</strong> {attachmentsToDelete.length}</span>}
                    </p>
                  </div>
                )}
              </div>
            </Card>
          </TabsContent>
        </Tabs>
      )}

      {/* –î–∏–∞–ª–æ–≥–∏ */}
      <Dialog open={showButtonDialog} onOpenChange={setShowButtonDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–í—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É</DialogTitle>
            <DialogDescription>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏</DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div>
              <Label htmlFor="button-text">–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</Label>
              <Input
                id="button-text"
                value={buttonText}
                onChange={(e) => setButtonText(e.target.value)}
                placeholder="–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å"
              />
            </div>
            <div>
              <Label htmlFor="button-url">–°—Å—ã–ª–∫–∞ (URL)</Label>
              <Input
                id="button-url"
                value={buttonUrl}
                onChange={(e) => setButtonUrl(e.target.value)}
                placeholder="https://"
              />
            </div>
            <div className="p-4 bg-gray-50 rounded-lg">
              <p className="text-sm text-gray-600 mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</p>
              <div className="flex justify-center">
                <a
                  href="#"
                  onClick={(e) => e.preventDefault()}
                  style={{
                    display: "inline-block",
                    padding: "12px 24px",
                    backgroundColor: template.styles.buttonColor,
                    color: template.styles.buttonTextColor,
                    textDecoration: "none",
                    borderRadius: "6px",
                    fontWeight: "bold",
                    fontFamily: "Arial, sans-serif",
                  }}
                >
                  {buttonText}
                </a>
              </div>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowButtonDialog(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleInsertButton}>–í—Å—Ç–∞–≤–∏—Ç—å</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      <Dialog open={showLinkDialog} onOpenChange={setShowLinkDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É</DialogTitle>
            <DialogDescription>–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏ URL –¥–ª—è —Å—Å—ã–ª–∫–∏</DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div>
              <Label htmlFor="link-text">–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏</Label>
              <Input
                id="link-text"
                value={linkText}
                onChange={(e) => setLinkText(e.target.value)}
                placeholder="–¢–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏"
              />
            </div>
            <div>
              <Label htmlFor="link-url">URL</Label>
              <Input
                id="link-url"
                value={linkUrl}
                onChange={(e) => setLinkUrl(e.target.value)}
                placeholder="https://"
              />
            </div>
            <div className="p-3 bg-gray-50 rounded">
              <p className="text-sm text-gray-600">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</p>
              <a 
                href="#" 
                onClick={(e) => e.preventDefault()}
                style={{ color: template.styles.primaryColor, textDecoration: 'underline' }}
                className="text-sm"
              >
                {linkText || linkUrl}
              </a>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowLinkDialog(false)}>
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button onClick={handleInsertLink}>–í—Å—Ç–∞–≤–∏—Ç—å</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}
