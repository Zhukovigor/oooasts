import { createAdminClient } from "@/lib/supabase/admin"
import { NextResponse } from "next/server"

// –†–µ–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
export const revalidate = 3600

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö XML-—Å–∏–º–≤–æ–ª–æ–≤
function escapeXml(unsafe: string): string {
  if (!unsafe) return ""
  
  return unsafe
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è HTML –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –î–∑–µ–Ω–æ–º
function htmlToDzenFormat(html: string): string {
  if (!html) return ""
  
  let text = html
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    .replace(/üèóÔ∏è/g, 'üèóÔ∏è')
    .replace(/üöú/g, 'üöú')
    .replace(/‚úÖ/g, '‚úÖ')
    .replace(/üí¨/g, 'üí¨')
    .replace(/üí∞/g, 'üí∞')
    .replace(/‚ö°/g, '‚ö°')
    .replace(/üõ†Ô∏è/g, 'üõ†Ô∏è')
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –î–∑–µ–Ω–æ–º
    .replace(/<h1[^>]*>(.*?)<\/h1>/gi, '<h1>$1</h1>')
    .replace(/<h2[^>]*>(.*?)<\/h2>/gi, '<h2>$1</h2>')
    .replace(/<h3[^>]*>(.*?)<\/h3>/gi, '<h3>$1</h3>')
    .replace(/<h4[^>]*>(.*?)<\/h4>/gi, '<h4>$1</h4>')
    .replace(/<h[5-6][^>]*>(.*?)<\/h[5-6]>/gi, '<h4>$1</h4>')
    
    // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    .replace(/<strong>(.*?)<\/strong>/gi, '<b>$1</b>')
    
    // –ö—É—Ä—Å–∏–≤
    .replace(/<em>(.*?)<\/em>/gi, '<i>$1</i>')
    
    // –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –∏ –∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    .replace(/<u>(.*?)<\/u>/gi, '<u>$1</u>')
    .replace(/<s>(.*?)<\/s>/gi, '<s>$1</s>')
    .replace(/<strike>(.*?)<\/strike>/gi, '<s>$1</s>')
    
    // –°–ø–∏—Å–∫–∏
    .replace(/<ul[^>]*>(.*?)<\/ul>/gis, (match, content) => {
      const listItems = content.match(/<li[^>]*>(.*?)<\/li>/gi) || []
      const formattedItems = listItems.map(item => 
        item.replace(/<li[^>]*>(.*?)<\/li>/i, '<li>$1</li>')
      ).join('')
      return `<ul>${formattedItems}</ul>`
    })
    
    .replace(/<ol[^>]*>(.*?)<\/ol>/gis, (match, content) => {
      const listItems = content.match(/<li[^>]*>(.*?)<\/li>/gi) || []
      const formattedItems = listItems.map(item => 
        item.replace(/<li[^>]*>(.*?)<\/li>/i, '<li>$1</li>')
      ).join('')
      return `<ol>${formattedItems}</ol>`
    })
    
    // –¶–∏—Ç–∞—Ç—ã
    .replace(/<blockquote[^>]*>(.*?)<\/blockquote>/gi, '<blockquote>$1</blockquote>')
    
    // –°—Å—ã–ª–∫–∏
    .replace(/<a[^>]*href="([^"]*)"[^>]*>(.*?)<\/a>/gi, '<a href="$1">$2</a>')
    
    // –ê–±–∑–∞—Ü—ã
    .replace(/<p[^>]*>(.*?)<\/p>/gi, '<p>$1</p>')
    .replace(/<div[^>]*>(.*?)<\/div>/gi, '<p>$1</p>')
    .replace(/<br\s*\/?>/gi, '<br/>')
    
    // –£–¥–∞–ª—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏
    .replace(/<script[^>]*>.*?<\/script>/gi, '')
    .replace(/<style[^>]*>.*?<\/style>/gi, '')
    .replace(/<iframe[^>]*>.*?<\/iframe>/gi, '')
    .replace(/<form[^>]*>.*?<\/form>/gi, '')
    
    // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    .replace(/\s+/g, ' ')
    .trim()

  return text
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
function createBeautifulExcerpt(html: string, maxLength: number = 150): string {
  if (!html) return ""
  
  let text = html
    .replace(/<[^>]*>/g, ' ')
    .replace(/\s+/g, ' ')
    .trim()
  
  if (text.length > maxLength) {
    text = text.substring(0, maxLength)
    const lastSpace = text.lastIndexOf(' ')
    if (lastSpace > 0) {
      text = text.substring(0, lastSpace)
    }
    text += '...'
  }
  
  return text
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function getImageSize(url: string): Promise<number> {
  return 102400; // 100KB –≤ –±–∞–π—Ç–∞—Ö
}

export async function GET(request: Request) {
  try {
    const supabase = createAdminClient()

    // –î–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –î–∑–µ–Ω–∞ –±–µ—Ä–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π
    // –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    const { data: articles, error } = await supabase
      .from("articles")
      .select("*")
      .eq("status", "published")
      .not("published_at", "is", null)
      .order("published_at", { ascending: false })
      .limit(30) // –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π:", error)
      return new NextResponse("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π", { status: 500 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ç–∞—Ç–µ–π –¥–ª—è –î–∑–µ–Ω–∞
    if (!articles || articles.length < 10) {
      console.warn(`–í–ù–ò–ú–ê–ù–ò–ï: –î–ª—è –î–∑–µ–Ω–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10 —Å—Ç–∞—Ç–µ–π. –°–µ–π—á–∞—Å: ${articles?.length || 0}`)
      // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
    }

    const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || "https://asts-nsk.ru"
    const currentUrl = new URL(request.url)
    const rssUrl = `${currentUrl.origin}${currentUrl.pathname}`

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã RSS
    const rssItems = await Promise.all(articles?.map(async (article) => {
      const articleUrl = `${baseUrl}/stati/${article.slug}`
      const pubDate = new Date(article.published_at).toUTCString()

      const beautifulExcerpt = createBeautifulExcerpt(article.excerpt || article.content || "")
      const dzenFormattedContent = htmlToDzenFormat(article.content || article.excerpt || "")

      let enclosureContent = ""
      
      if (article.main_image) {
        const imageUrl = article.main_image.startsWith("http") 
          ? article.main_image 
          : `${baseUrl}${article.main_image.startsWith("/") ? "" : "/"}${article.main_image}`
        
        const imageSize = await getImageSize(imageUrl)
        enclosureContent = `
        <enclosure url="${escapeXml(imageUrl)}" type="image/jpeg" length="${imageSize}"/>`
      }

      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –î–∑–µ–Ω–∞
      const dzenCategories = [
        'format-article',
        'index', 
        'comment-all'
      ].map(cat => `        <category>${cat}</category>`).join('\n')

      return `    <item>
        <title>${escapeXml(article.title || "")}</title>
        <link>${escapeXml(articleUrl)}</link>
        <description>${escapeXml(beautifulExcerpt)}</description>
        <author>info@asts-nsk.ru (–û–û–û –ê–°–¢–°)</author>
        <category>${escapeXml(article.category || "–°—Ç–∞—Ç—å–∏")}</category>
        <pubDate>${pubDate}</pubDate>
        <guid isPermaLink="true">${escapeXml(articleUrl)}</guid>${enclosureContent}
${dzenCategories}
        <content:encoded><![CDATA[<h1>${escapeXml(article.title || "")}</h1>${dzenFormattedContent}]]></content:encoded>
      </item>`
    }) || [])

    const rss = `<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" 
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>–û–û–û –ê–°–¢–° - –°—Ç–∞—Ç—å–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏</title>
    <link>${escapeXml(baseUrl)}</link>
    <description>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–µ, —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–∞—Ö, –∞–≤—Ç–æ–±–µ—Ç–æ–Ω–æ–Ω–∞—Å–æ—Å–∞—Ö –∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ê–°–¢–°</description>
    <language>ru</language>
    <lastBuildDate>${new Date().toUTCString()}</lastBuildDate>
    <atom:link href="${escapeXml(rssUrl)}" rel="self" type="application/rss+xml"/>
    <webMaster>info@asts-nsk.ru (–û–û–û –ê–°–¢–°)</webMaster>
    <managingEditor>info@asts-nsk.ru (–û–û–û –ê–°–¢–°)</managingEditor>
${rssItems.join("\n")}
  </channel>
</rss>`

    return new NextResponse(rss, {
      headers: {
        "Content-Type": "application/xml; charset=UTF-8",
        "Cache-Control": "public, s-maxage=3600, stale-while-revalidate=7200",
      },
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RSS-–ª–µ–Ω—Ç—ã:", error)
    return new NextResponse("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ RSS-–ª–µ–Ω—Ç—ã", { status: 500 })
  }
}
